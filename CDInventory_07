#------------------------------------------#
# Title: CDInventory.py
# Desc: Working with classes and functions.
# Change Log: (Who, When, What)
# BShepherd, 2020-Aug-17, Created File
# BShepherd, 2020-Aug-17, Completed TODO tasks
# BShepherd, 2020-Aug-18, Added DocString's
# BShepherd, 2020-Aug-23, Updated the script to process DAT file type
# BShepherd, 2020-Aug-24, Adding in additional error handling
#------------------------------------------#

# -- DATA -- #
import pickle
strChoice = '' # User input
lstTbl = []  # list of lists to hold data
dicRow = {}  # list of data row
strFileName = 'CDInventory.dat'  # data storage file
objFile = None  # file object


# -- PROCESSING -- #
class DataProcessor:

    @staticmethod
    def add_cdinfo(str, strTitle, stArtist, table):
        """ Function to add the CD info to a file

        Args:
            intID: First value captured to identify the row
            strTitle: Second value captured to identify the Title of an album
            stArtist: Thrid value captured to identify the Artest of the album

        Returns:
            # Without a return statement in the function, it's not actually returning anything.
            # The added rows to your list.
            None

        """
        # We had to change intID to strID in the function declaration to make this line valid.
        intID = int(strID)
        dicRow = {'ID': intID, 'Title': strTitle, 'Artist': stArtist}
        table.append(dicRow)
        
    @staticmethod
    def del_item(id_to_remove, table):
        """ Function to delete CD info from the list

        Args:
            Table: 2D Table that holds data during runtime(lstTbl).

        Returns:
            # Removes the entered row from the lstTbl.
            None

        """
        try:
            intRowNr = -1
            blnCDRemoved = False
            for row in table:
                intRowNr += 1
                if row['ID'] == id_to_remove:
                    del table[intRowNr]
                    blnCDRemoved = True
                    break
        except ValueError as e:
                print('===================================================')
                print(type(e), e, e.__doc__, sep='\n')
                print('Please enter an integer to delete a row')
                print('===================================================\n')
        if blnCDRemoved:
            print('The CD was removed')
        else:
            print('Could not find this CD!')

class FileProcessor:
    """Processing the data to and from text file"""

    @staticmethod
    def read_file(file_name, table):
        """Function to manage data ingestion from file to a list of dictionaries

        Reads the data from file identified by file_name into a 2D table
        (list of dicts) table one line in the file represents one dictionary row in table.

        Args:
            file_name (string): name of file used to read the data from
            table (list of dict): 2D data structure (list of dicts) that holds the data during runtime

        Returns:
            None.
        """
        table.clear()  # this clears existing data and allows to load data from file
        try:
            objFile = open(file_name, 'rb')
            data = pickle.load(objFile)
            table.extend(data)
            objFile.close()
        except FileNotFoundError as e:
            print('===================================================')
            print(type(e), e, e.__doc__, sep='\n')
            print('You will need to usee the Add function to Continue')
            print('===================================================\n')
        except EOFError as e:
            print('===================================================')
            print(type(e), e, e.__doc__, sep='\n')
            print('Your file is Empty please use Add to add to your file :\)')
            print('===================================================\n')

    @staticmethod
    def write_file(file_name, table):
        """ Function to add the CD info to a file

        Args:
            file_name: File to read data from
            Table: 2D Table that holds data during runtime(lstTbl)

        Returns:
            None

        """
        objFile = open(file_name, 'wb')
        pickle.dump(table, objFile)
        objFile.close()

# -- PRESENTATION (Input/Output) -- #

class IO:
    """Handling Input / Output"""

    @staticmethod
    def print_menu():
        """Displays a menu of choices to the user

        Args:
            None.

        Returns:
            None.

        """
        print('Menu\n\n[l] load Inventory from file\n[a] Add CD\n[i] Display Current Inventory')
        print('[d] delete CD from Inventory\n[s] Save Inventory to file\n[x] exit\n')

    @staticmethod
    def menu_choice():
        """Gets user input for menu selection

        Args:
            None.

        Returns:
            choice (string): a lower case sting of the users input out of the choices l, a, i, d, s or x

        """
        choice = ' '
        while choice not in ['l', 'a', 'i', 'd', 's', 'x']:
            choice = input('Which operation would you like to perform? [l, a, i, d, s or x]: ').lower().strip()
        print()  # Add extra space for layout
        return choice

    @staticmethod
    def show_inventory(table):
        """Displays current inventory table


        Args:
            table (list of dict): 2D data structure (list of dicts) that holds the data during runtime.

        Returns:
            None.

        """
        print('======= The Current Inventory: =======')
        print('ID\tCD Title (by: Artist)\n')
        for row in table:
            print('{}\t{} (by:{})'.format(*row.values()))
        print('======================================')


    @staticmethod
    # You do not need to pass any values to this function.
    def cd_info():
        """ Function to add the CD info to a file

        Args:
            None

        Returns:
            # None
            strID: ID input by user to use as an identifier
            strTitle: Second value captured to identify the Title of an album
            stArtist: Thrid value captured to identify the Artest of the album

        """
        
        strID = input('Enter ID: ').strip()
        strTitle = input('What is the CD\'s title? ').strip()
        stArtist = input('What is the Artist\'s name? ').strip()
        return(strID, strTitle, stArtist)

# 1. When program starts, read in the currently saved Inventory
FileProcessor.read_file(strFileName, lstTbl)

# 2. start main loop
while True:
    # 2.1 Display Menu to user and get choice
    IO.print_menu()
    strChoice = IO.menu_choice()
    # 3. Process menu selection
    # 3.1 process exit first
    if strChoice == 'x':
        break

    # 3.2 process load inventory
    if strChoice == 'l':
        print('WARNING: If you continue, all unsaved data will be lost and the Inventory re-loaded from file.')
        strYesNo = input('type \'yes\' to continue and reload from file. otherwise reload will be canceled')
        if strYesNo.lower() == 'yes':
            print('reloading...')
            FileProcessor.read_file(strFileName, lstTbl)
            IO.show_inventory(lstTbl)
        else:
            input('canceling... Inventory data NOT reloaded. Press [ENTER] to continue to the menu.')
            IO.show_inventory(lstTbl)
        continue  # start loop back at top.

    # 3.3 process add a CD
    elif strChoice == 'a':
        # 3.3.1 Ask user for new ID, CD Title and Artist
        strID, strTitle, stArtist = IO.cd_info()
        # 3.3.2 Add item to the table
        DataProcessor.add_cdinfo(strID, strTitle, stArtist, lstTbl)
        IO.show_inventory(lstTbl)
        continue  # start loop back at top.

    # 3.4 process display current inventory
    elif strChoice == 'i':
        IO.show_inventory(lstTbl)
        continue  # start loop back at top.

    # 3.5 process delete a CD
    elif strChoice == 'd':
        # 3.5.1 get Userinput for which CD to delete
        # 3.5.1.1 display Inventory to user
        IO.show_inventory(lstTbl)
        # 3.5.1.2 ask user which ID to remove
        intIDDel = int(input('Which ID would you like to delete? ').strip())
        # 3.5.2 search thru table and delete CD
        DataProcessor.del_item(intIDDel, lstTbl)
        IO.show_inventory(lstTbl)
        continue  # start loop back at top.

    # 3.6 process save inventory to file
    elif strChoice == 's':
        # 3.6.1 Display current inventory and ask user for confirmation to save
        IO.show_inventory(lstTbl)
        strYesNo = input('Save this inventory to file? [y/n] ').strip().lower()
        # 3.6.2 Process choice
        if strYesNo == 'y':
            FileProcessor.write_file(strFileName, lstTbl)
        else:
            input('The inventory was NOT saved to file. Press [ENTER] to return to the menu.')
        continue  # start loop back at top.

    # 3.7 catch-all should not be possible, as user choice gets vetted in IO, but to be save:
else:
    print('General Error')
